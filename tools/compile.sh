#!/bin/bash

# This script compiles the tool in the given folder to WebAssembly. Invoked by compile.py; do not call directly.
usage="Do not call compile.sh directly; see README"
DIR_TOOL=${1?$usage}
BRANCH=${2?$usage}
TOOL=$(basename $DIR_TOOL)


# ------------------------------------------------------------------------------
# Shared Emscripten settings
# ------------------------------------------------------------------------------

# Commonly used Emscripten compilation settings for WebAssembly modules that run in the browser
EM_FLAGS=$(cat <<EOF
    -s USE_ZLIB=1
    -s INVOKE_RUN=0
    -s FORCE_FILESYSTEM=1
    -s EXPORTED_RUNTIME_METHODS=["callMain","FS","PROXYFS","WORKERFS"]
    -s MODULARIZE=1
    -s ENVIRONMENT="web,worker"
    -s ALLOW_MEMORY_GROWTH=1
    -lworkerfs.js -lproxyfs.js
EOF
)
EM_FLAGS=$(echo $EM_FLAGS)  # Remove whitespace

# Function to remove Nanosleep requirements for GNU tools (Nanosleep not supported in Emscripten)
function EM_GNU_NANOSLEEP() {
    sed -i 's|if ${gl_cv_func_sleep_works+:} false|if true|g' configure
    sed -i 's|if ${ac_cv_search_nanosleep+:} false|if true|g' configure
    sed -i 's|if ${gl_cv_func_nanosleep+:} false|if true|g' configure
}

# Export vars and functions
export EM_FLAGS;
export -f EM_GNU_NANOSLEEP;


# ------------------------------------------------------------------------------
# Setup codebase
# ------------------------------------------------------------------------------

echo "â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”"
echo "ðŸ§¬ $TOOL, branch '$BRANCH'"
echo "â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”"

function log() {
    BLUE="\033[1;34m"
    OFF="\033[0m"
    echo -e "$BLUE> $1$OFF"
}

# Prepare build folder
cd $DIR_TOOL
mkdir -p build/
cd src/

# Go to branch/tag of interest (clean up previous iterations)
log "Resetting code changes..."
git reset --hard
git clean -f -d
git checkout "$BRANCH"

# Apply patches, if any
patch_file=../patches/${BRANCH}.patch
if [[ -f "$patch_file" ]]; then
    log "Applying patch file <$patch_file>..."
    git apply -v $patch_file
else
    log "No patch file found at <$patch_file>"
fi


# ------------------------------------------------------------------------------
# Compile tool
# ------------------------------------------------------------------------------

log "Compiling to WebAssembly..."
../compile.sh

# Finalize glue code (there can be more than one program per tool, e.g. coreutils has many utilities)
log "Finalizing glue code..."
for glueCode in $(ls ../build/*.js);
do
    # TODO: Remove this once fixed in Emscripten
    # Patch Emscripten bug #12367 - see <https://github.com/emscripten-core/emscripten/issues/12367>
    sed -i 's/var stat=stream.node.mount.opts.fs.fstat(stream.nfd);/var stat=stream.node.node_ops.getattr(stream.node);/g' $glueCode
    # TODO: Remove this once fixed in Emscripten
    # Without this patch, invalid file paths throw instead of returning an error. This only seems to happen
    # when accessing an invalid file in a path that corresponds to a symlink within a PROXYFS file system Â¯\_(ãƒ„)_/Â¯
    # This isn't used that often but does otherwise break samtools commands that look for a .csi index before
    # looking for a .bai index.
    sed -i 's/return-54}throw e/return-54}return-54/g' $glueCode

    # Prepend info about biowasm
    echo "// Auto-generated by biowasm; see biowasm.com for details." > "${glueCode}.tmp"
    cat "$glueCode" >> "${glueCode}.tmp"
    mv "${glueCode}.tmp" "$glueCode"
done
