#!/bin/bash

# This script compiles a tool to WebAssembly and is invoked by the Makefile.

usage="Usage: ./compile.sh toolName toolVersion toolBranch targetName"
TOOL=${1?$usage}
VERSION=${2?$usage}
BRANCH=${3?$usage}
TARGET=${4?$usage}
DIR_TOOLS=tools/

# ------------------------------------------------------------------------------
# Initialize
# ------------------------------------------------------------------------------

# Load target Emscripten flags
. ./config/shared.$TARGET.sh

# Prep build/ folder
cd "${DIR_TOOLS}/${TOOL}/"
mkdir -p build

# ------------------------------------------------------------------------------
# Setup codebase
# ------------------------------------------------------------------------------

echo "â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”"
echo "ðŸ§¬ Processing $TOOL v$VERSION @ branch '$BRANCH'..."
echo "â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”"

cd src/

# Go to branch/tag of interest (clean up previous iterations)
git reset --hard
git clean -f -d
git fetch --all
git checkout "$BRANCH"

# Apply patches, if any
patch_file=../patches/$BRANCH
if [[ -f "$patch_file" ]]; then
    echo "Applying patch file <$patch_file>"
    git apply -v $patch_file
else
    echo "No patch file found at <$patch_file>"
fi

cd ../

# ------------------------------------------------------------------------------
# Compile tool
# ------------------------------------------------------------------------------

echo "â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”"
echo "ðŸ§¬ Compiling $TOOL v$VERSION to WebAssembly..."
echo "â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”"
./compile.sh

# ------------------------------------------------------------------------------
# Finalize
# ------------------------------------------------------------------------------

for glueCode in $(ls build/*.js);
do
    # TODO: Remove this once fixed in Emscripten
    # Patch Emscripten bug #12367 - see <https://github.com/emscripten-core/emscripten/issues/12367>
    sed -i 's/var stat=stream.node.mount.opts.fs.fstat(stream.nfd);/var stat=stream.node.node_ops.getattr(stream.node);/g'

    # Prepend info about biowasm
    echo '// Auto-generated by biowasm; see biowasm.com for details.' > "${glueCode}.tmp"
    cat "$glueCode" >> "${glueCode}.tmp"
    mv "${glueCode}.tmp" "$glueCode"
done

# Copy over (or create) config.json file
if [[ -f "config.json" ]]; then
    cp "config.json" "build/config.json"
else
    echo '{"wasm-features":[]}' > "build/config.json"
fi
